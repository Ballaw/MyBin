#ifndef PRIMES_H
#define PRIMES_H
#ifndef uns64
#define uns64 unsigned long long
#endif

/*
 * Sieve of Eratosthenes
 *
 * Returns a pointer to an array that contains a Prime List in bitwise, wheel factorized form
 */
unsigned char* SieveEratosthenes(int);

/*
 * Prime List
 *
 * Returns a pointer to an array that contains a list of primes beginning at index 0 with 2
 * The last index+1 value is set to 0
 */
int* primeListE(int);
int* primeListE_inc(int, unsigned char*);

/*
 * Next Prime
 *
 * Returns the next prime in the given SE list. Pass the SE list on the first call and use
 * NULL on the rest.  Passing any uns char array, including the original, after that results
 * in a restart of the count off. The ending value must be used each call.
 */
int NextPrime(int, unsigned char*);

/*
 * Prime Index List
 *
 * Returns a pointer to a char array that defines primes by using the array index
 * Ex. Array[index]=1 if the index is prime
 */
unsigned char* primeIndexListE(int);
unsigned char* primeIndexListE_inc(int, unsigned char*);

/*
 * Prime Factors
 *
 * Returns a pointer to an array of the prime factors of the input number
 * The input can be obtained by multiplying all the elements of the array
 */
int* primeFactorsE(int);
int* primeFactorsE_inc(int, int*);
uns64* primeFactorsE_uns64(uns64);

/*
 * Prime Check
 *
 * Returns true if the input is a prime
 * Takes in the Prime List generated by Sieve of Eratosthenes
 */
int isPrimeE(int, unsigned char*);

/*
 * Prime Check
 *
 * Returns true if the input is a prime
 */
int isPrime(int);
int isPrime_uns64(uns64);

#ifndef TRUE
#define TRUE 1
#endif

#ifndef FALSE
#define FALSE 0
#endif

#endif
